{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\axeld\\\\Documents\\\\ProjectDevSuperior\\\\front-web\\\\src\\\\Orders\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { fetchProducts, saveOrder } from '../api';\nimport ProductsList from './ProductsList';\nimport StepsHeader from './StepsHeader';\nimport './styles.css';\nimport OrderLocation from './OrderLocation';\nimport OrderSummary from './OrderSummary';\nimport Footer from '../Footer';\nimport { checkIsSelected } from './helpers';\n\nfunction Orders() {\n  _s();\n\n  const [products, setProducts] = useState([]);\n  const [selectedProducts, setSelectedProducts] = useState([]);\n  const [orderLocation, setOrderLocation] = useState();\n  const totalPrice = selectedProducts.reduce((sum, item) => {\n    return sum + item.price;\n  }, 0);\n  useEffect(() => {\n    fetchProducts().then(response => setProducts(response.data)).catch(() => {\n      toast.warning('Erro ao lista pedido');\n    });\n  }, []);\n\n  const handleSelectProduct = product => {\n    const isAlreadySelected = checkIsSelected(selectedProducts, product);\n\n    if (isAlreadySelected) {\n      const selected = selectedProducts.filter(item => item.id !== product.id);\n      setSelectedProducts(selected);\n    } else {\n      setSelectedProducts(previous => [...previous, product]);\n    }\n  };\n\n  const handleSubmit = () => {\n    const productsIds = selectedProducts.map(({\n      id\n    }) => ({\n      id\n    }));\n    const payload = { ...orderLocation,\n      products: productsIds\n    };\n    saveOrder(payload).then(response => {\n      toast.error(`Pedido enviado com sucesso! Nº ${response.data.id}`);\n      setSelectedProducts([]);\n    }).catch(() => {\n      toast.warning('Erro ao enviar pedido');\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"orders-container\",\n      children: [/*#__PURE__*/_jsxDEV(StepsHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ProductsList, {\n        products: products,\n        onSelectProduct: handleSelectProduct,\n        selectedProducts: selectedProducts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(OrderLocation, {\n        onChangeLocation: location => setOrderLocation(location)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(OrderSummary, {\n        amount: selectedProducts.length,\n        totalPrice: totalPrice,\n        onSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Orders, \"7VrUMxmoBAqtq6mQ3qmk2qmebyk=\");\n\n_c = Orders;\nexport default Orders;\n\nvar _c;\n\n$RefreshReg$(_c, \"Orders\");","map":{"version":3,"sources":["C:/Users/axeld/Documents/ProjectDevSuperior/front-web/src/Orders/index.tsx"],"names":["useEffect","useState","toast","fetchProducts","saveOrder","ProductsList","StepsHeader","OrderLocation","OrderSummary","Footer","checkIsSelected","Orders","products","setProducts","selectedProducts","setSelectedProducts","orderLocation","setOrderLocation","totalPrice","reduce","sum","item","price","then","response","data","catch","warning","handleSelectProduct","product","isAlreadySelected","selected","filter","id","previous","handleSubmit","productsIds","map","payload","error","location","length"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { fetchProducts, saveOrder } from '../api';\r\nimport ProductsList from './ProductsList';\r\nimport StepsHeader from './StepsHeader';\r\nimport './styles.css';\r\nimport { OrderLocationData, Product } from './types';\r\nimport OrderLocation from './OrderLocation';\r\nimport OrderSummary from './OrderSummary';\r\nimport Footer from '../Footer';\r\nimport { checkIsSelected } from './helpers';\r\n\r\nfunction Orders () {\r\n    const [products , setProducts] = useState<Product[]>([]);\r\n    const [selectedProducts , setSelectedProducts] = useState<Product[]>([]);\r\n    const [orderLocation, setOrderLocation] = useState<OrderLocationData>();\r\n    const totalPrice = selectedProducts.reduce((sum, item) => {\r\n        return sum + item.price;\r\n    }, 0);\r\n    \r\n    useEffect(() => {\r\n        fetchProducts()\r\n        .then(response => setProducts(response.data))\r\n        .catch(() => {\r\n            toast.warning('Erro ao lista pedido');\r\n          })\r\n    }, [])\r\n    \r\n    const handleSelectProduct = (product: Product) => {\r\n        const isAlreadySelected = checkIsSelected(selectedProducts, product);\r\n      \r\n        if (isAlreadySelected) {\r\n          const selected = selectedProducts.filter(item => item.id !== product.id);\r\n          setSelectedProducts(selected);\r\n        } else {\r\n          setSelectedProducts(previous => [...previous, product]);\r\n        }\r\n      }\r\n\r\n      const handleSubmit = () => {\r\n        const productsIds = selectedProducts.map(({ id }) => ({ id }));\r\n        const payload = {\r\n          ...orderLocation!,\r\n          products: productsIds\r\n        }\r\n      \r\n        saveOrder(payload).then((response) => {\r\n          toast.error(`Pedido enviado com sucesso! Nº ${response.data.id}`);\r\n          setSelectedProducts([]);\r\n        })\r\n          .catch(() => {\r\n            toast.warning('Erro ao enviar pedido');\r\n          })\r\n      }\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"orders-container\">\r\n            <StepsHeader />\r\n            <ProductsList products={products} onSelectProduct={handleSelectProduct} selectedProducts = {selectedProducts} />\r\n            <OrderLocation onChangeLocation={location => setOrderLocation(location)}/>\r\n            <OrderSummary amount={selectedProducts.length} totalPrice={totalPrice} onSubmit={handleSubmit} />\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Orders;"]},"metadata":{},"sourceType":"module"}